// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v4.24.3
// source: spaceproto.proto

package spaceproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min float64 `protobuf:"fixed64,1,opt,name=Min,proto3" json:"Min,omitempty"`
	Max float64 `protobuf:"fixed64,2,opt,name=Max,proto3" json:"Max,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	mi := &file_spaceproto_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{0}
}

func (x *Range) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Range) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Vector3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vector3) Reset() {
	*x = Vector3{}
	mi := &file_spaceproto_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector3) ProtoMessage() {}

func (x *Vector3) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector3.ProtoReflect.Descriptor instead.
func (*Vector3) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{1}
}

func (x *Vector3) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector3) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector3) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Quaternion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	W float64 `protobuf:"fixed64,4,opt,name=w,proto3" json:"w,omitempty"`
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	mi := &file_spaceproto_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{2}
}

func (x *Quaternion) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Quaternion) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Quaternion) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Quaternion) GetW() float64 {
	if x != nil {
		return x.W
	}
	return 0
}

type GlobalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SunNormalized            *Vector3 `protobuf:"bytes,1,opt,name=SunNormalized,proto3" json:"SunNormalized,omitempty"`
	SunIntensity             float64  `protobuf:"fixed64,2,opt,name=SunIntensity,proto3" json:"SunIntensity,omitempty"`
	SmallShipMaxSpeed        float64  `protobuf:"fixed64,3,opt,name=SmallShipMaxSpeed,proto3" json:"SmallShipMaxSpeed,omitempty"`
	SmallShipMaxAngularSpeed float64  `protobuf:"fixed64,4,opt,name=SmallShipMaxAngularSpeed,proto3" json:"SmallShipMaxAngularSpeed,omitempty"`
	LargeShipMaxSpeed        float64  `protobuf:"fixed64,5,opt,name=LargeShipMaxSpeed,proto3" json:"LargeShipMaxSpeed,omitempty"`
	LargeShipMaxAngularSpeed float64  `protobuf:"fixed64,6,opt,name=LargeShipMaxAngularSpeed,proto3" json:"LargeShipMaxAngularSpeed,omitempty"`
}

func (x *GlobalInfo) Reset() {
	*x = GlobalInfo{}
	mi := &file_spaceproto_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalInfo) ProtoMessage() {}

func (x *GlobalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalInfo.ProtoReflect.Descriptor instead.
func (*GlobalInfo) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{3}
}

func (x *GlobalInfo) GetSunNormalized() *Vector3 {
	if x != nil {
		return x.SunNormalized
	}
	return nil
}

func (x *GlobalInfo) GetSunIntensity() float64 {
	if x != nil {
		return x.SunIntensity
	}
	return 0
}

func (x *GlobalInfo) GetSmallShipMaxSpeed() float64 {
	if x != nil {
		return x.SmallShipMaxSpeed
	}
	return 0
}

func (x *GlobalInfo) GetSmallShipMaxAngularSpeed() float64 {
	if x != nil {
		return x.SmallShipMaxAngularSpeed
	}
	return 0
}

func (x *GlobalInfo) GetLargeShipMaxSpeed() float64 {
	if x != nil {
		return x.LargeShipMaxSpeed
	}
	return 0
}

func (x *GlobalInfo) GetLargeShipMaxAngularSpeed() float64 {
	if x != nil {
		return x.LargeShipMaxAngularSpeed
	}
	return 0
}

type SpaceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    string `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *SpaceMessage) Reset() {
	*x = SpaceMessage{}
	mi := &file_spaceproto_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpaceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceMessage) ProtoMessage() {}

func (x *SpaceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceMessage.ProtoReflect.Descriptor instead.
func (*SpaceMessage) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{4}
}

func (x *SpaceMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SpaceMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Grid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string      `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name             string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Owner            string      `protobuf:"bytes,3,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Faction          string      `protobuf:"bytes,4,opt,name=Faction,proto3" json:"Faction,omitempty"`
	FactionTag       string      `protobuf:"bytes,5,opt,name=FactionTag,proto3" json:"FactionTag,omitempty"`
	Blocks           int32       `protobuf:"varint,6,opt,name=Blocks,proto3" json:"Blocks,omitempty"`
	IsPowered        bool        `protobuf:"varint,7,opt,name=IsPowered,proto3" json:"IsPowered,omitempty"`
	GridSize         float64     `protobuf:"fixed64,8,opt,name=GridSize,proto3" json:"GridSize,omitempty"`
	IsStatic         bool        `protobuf:"varint,9,opt,name=IsStatic,proto3" json:"IsStatic,omitempty"`
	IsParked         bool        `protobuf:"varint,10,opt,name=IsParked,proto3" json:"IsParked,omitempty"`
	ParentId         string      `protobuf:"bytes,11,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	RelGroupId       int32       `protobuf:"varint,12,opt,name=RelGroupId,proto3" json:"RelGroupId,omitempty"`
	RelGroupCount    int32       `protobuf:"varint,13,opt,name=RelGroupCount,proto3" json:"RelGroupCount,omitempty"`
	PCU              int32       `protobuf:"varint,14,opt,name=PCU,proto3" json:"PCU,omitempty"`
	Position         *Vector3    `protobuf:"bytes,15,opt,name=Position,proto3" json:"Position,omitempty"`
	Rotation         *Quaternion `protobuf:"bytes,16,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	LastBlocksUpdate int64       `protobuf:"varint,17,opt,name=LastBlocksUpdate,proto3" json:"LastBlocksUpdate,omitempty"`
}

func (x *Grid) Reset() {
	*x = Grid{}
	mi := &file_spaceproto_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Grid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grid) ProtoMessage() {}

func (x *Grid) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grid.ProtoReflect.Descriptor instead.
func (*Grid) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{5}
}

func (x *Grid) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Grid) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Grid) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Grid) GetFaction() string {
	if x != nil {
		return x.Faction
	}
	return ""
}

func (x *Grid) GetFactionTag() string {
	if x != nil {
		return x.FactionTag
	}
	return ""
}

func (x *Grid) GetBlocks() int32 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *Grid) GetIsPowered() bool {
	if x != nil {
		return x.IsPowered
	}
	return false
}

func (x *Grid) GetGridSize() float64 {
	if x != nil {
		return x.GridSize
	}
	return 0
}

func (x *Grid) GetIsStatic() bool {
	if x != nil {
		return x.IsStatic
	}
	return false
}

func (x *Grid) GetIsParked() bool {
	if x != nil {
		return x.IsParked
	}
	return false
}

func (x *Grid) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Grid) GetRelGroupId() int32 {
	if x != nil {
		return x.RelGroupId
	}
	return 0
}

func (x *Grid) GetRelGroupCount() int32 {
	if x != nil {
		return x.RelGroupCount
	}
	return 0
}

func (x *Grid) GetPCU() int32 {
	if x != nil {
		return x.PCU
	}
	return 0
}

func (x *Grid) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Grid) GetRotation() *Quaternion {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *Grid) GetLastBlocksUpdate() int64 {
	if x != nil {
		return x.LastBlocksUpdate
	}
	return 0
}

type GridBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GridPosition *Vector3 `protobuf:"bytes,1,opt,name=GridPosition,proto3" json:"GridPosition,omitempty"`
	Position     *Vector3 `protobuf:"bytes,2,opt,name=Position,proto3" json:"Position,omitempty"`
	MaxHealth    float64  `protobuf:"fixed64,3,opt,name=MaxHealth,proto3" json:"MaxHealth,omitempty"`
	Health       float64  `protobuf:"fixed64,4,opt,name=Health,proto3" json:"Health,omitempty"`
	BlockType    string   `protobuf:"bytes,5,opt,name=BlockType,proto3" json:"BlockType,omitempty"`
}

func (x *GridBlock) Reset() {
	*x = GridBlock{}
	mi := &file_spaceproto_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GridBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridBlock) ProtoMessage() {}

func (x *GridBlock) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridBlock.ProtoReflect.Descriptor instead.
func (*GridBlock) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{6}
}

func (x *GridBlock) GetGridPosition() *Vector3 {
	if x != nil {
		return x.GridPosition
	}
	return nil
}

func (x *GridBlock) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GridBlock) GetMaxHealth() float64 {
	if x != nil {
		return x.MaxHealth
	}
	return 0
}

func (x *GridBlock) GetHealth() float64 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *GridBlock) GetBlockType() string {
	if x != nil {
		return x.BlockType
	}
	return ""
}

type GridGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner      string  `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Faction    string  `protobuf:"bytes,2,opt,name=Faction,proto3" json:"Faction,omitempty"`
	FactionTag string  `protobuf:"bytes,3,opt,name=FactionTag,proto3" json:"FactionTag,omitempty"`
	Blocks     int32   `protobuf:"varint,4,opt,name=Blocks,proto3" json:"Blocks,omitempty"`
	Grids      []*Grid `protobuf:"bytes,5,rep,name=Grids,proto3" json:"Grids,omitempty"`
}

func (x *GridGroup) Reset() {
	*x = GridGroup{}
	mi := &file_spaceproto_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GridGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridGroup) ProtoMessage() {}

func (x *GridGroup) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridGroup.ProtoReflect.Descriptor instead.
func (*GridGroup) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{7}
}

func (x *GridGroup) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GridGroup) GetFaction() string {
	if x != nil {
		return x.Faction
	}
	return ""
}

func (x *GridGroup) GetFactionTag() string {
	if x != nil {
		return x.FactionTag
	}
	return ""
}

func (x *GridGroup) GetBlocks() int32 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *GridGroup) GetGrids() []*Grid {
	if x != nil {
		return x.Grids
	}
	return nil
}

type GridUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grid      *Grid `protobuf:"bytes,1,opt,name=Grid,proto3" json:"Grid,omitempty"`
	IsNew     bool  `protobuf:"varint,2,opt,name=IsNew,proto3" json:"IsNew,omitempty"`
	IsDeleted bool  `protobuf:"varint,3,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"`
}

func (x *GridUpdate) Reset() {
	*x = GridUpdate{}
	mi := &file_spaceproto_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GridUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridUpdate) ProtoMessage() {}

func (x *GridUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridUpdate.ProtoReflect.Descriptor instead.
func (*GridUpdate) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{8}
}

func (x *GridUpdate) GetGrid() *Grid {
	if x != nil {
		return x.Grid
	}
	return nil
}

func (x *GridUpdate) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *GridUpdate) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type Voxel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string      `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name               string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	DebugName          string      `protobuf:"bytes,3,opt,name=DebugName,proto3" json:"DebugName,omitempty"`
	Position           *Vector3    `protobuf:"bytes,4,opt,name=Position,proto3" json:"Position,omitempty"`
	Rotation           *Quaternion `protobuf:"bytes,5,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	Size               float64     `protobuf:"fixed64,6,opt,name=Size,proto3" json:"Size,omitempty"`
	HasAtmosphere      bool        `protobuf:"varint,7,opt,name=HasAtmosphere,proto3" json:"HasAtmosphere,omitempty"`
	AtmosphereAltitude float64     `protobuf:"fixed64,8,opt,name=AtmosphereAltitude,proto3" json:"AtmosphereAltitude,omitempty"`
	HillParameters     *Range      `protobuf:"bytes,9,opt,name=HillParameters,proto3" json:"HillParameters,omitempty"`
}

func (x *Voxel) Reset() {
	*x = Voxel{}
	mi := &file_spaceproto_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Voxel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voxel) ProtoMessage() {}

func (x *Voxel) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voxel.ProtoReflect.Descriptor instead.
func (*Voxel) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{9}
}

func (x *Voxel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Voxel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Voxel) GetDebugName() string {
	if x != nil {
		return x.DebugName
	}
	return ""
}

func (x *Voxel) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Voxel) GetRotation() *Quaternion {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *Voxel) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Voxel) GetHasAtmosphere() bool {
	if x != nil {
		return x.HasAtmosphere
	}
	return false
}

func (x *Voxel) GetAtmosphereAltitude() float64 {
	if x != nil {
		return x.AtmosphereAltitude
	}
	return 0
}

func (x *Voxel) GetHillParameters() *Range {
	if x != nil {
		return x.HillParameters
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string      `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name     string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Faction  string      `protobuf:"bytes,3,opt,name=Faction,proto3" json:"Faction,omitempty"`
	SteamId  string      `protobuf:"bytes,4,opt,name=SteamId,proto3" json:"SteamId,omitempty"`
	IsOnline bool        `protobuf:"varint,5,opt,name=IsOnline,proto3" json:"IsOnline,omitempty"`
	Position *Vector3    `protobuf:"bytes,6,opt,name=Position,proto3" json:"Position,omitempty"`
	Rotation *Quaternion `protobuf:"bytes,7,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_spaceproto_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{10}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetFaction() string {
	if x != nil {
		return x.Faction
	}
	return ""
}

func (x *Player) GetSteamId() string {
	if x != nil {
		return x.SteamId
	}
	return ""
}

func (x *Player) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *Player) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Player) GetRotation() *Quaternion {
	if x != nil {
		return x.Rotation
	}
	return nil
}

type PlayerUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player    *Player `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player,omitempty"`
	IsNew     bool    `protobuf:"varint,2,opt,name=IsNew,proto3" json:"IsNew,omitempty"`
	IsDeleted bool    `protobuf:"varint,3,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"`
}

func (x *PlayerUpdate) Reset() {
	*x = PlayerUpdate{}
	mi := &file_spaceproto_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerUpdate) ProtoMessage() {}

func (x *PlayerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerUpdate.ProtoReflect.Descriptor instead.
func (*PlayerUpdate) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerUpdate) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *PlayerUpdate) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *PlayerUpdate) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type PlanetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Planets map[string]*Voxel `protobuf:"bytes,1,rep,name=Planets,proto3" json:"Planets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlanetList) Reset() {
	*x = PlanetList{}
	mi := &file_spaceproto_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanetList) ProtoMessage() {}

func (x *PlanetList) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanetList.ProtoReflect.Descriptor instead.
func (*PlanetList) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{12}
}

func (x *PlanetList) GetPlanets() map[string]*Voxel {
	if x != nil {
		return x.Planets
	}
	return nil
}

type GridList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grids map[string]*Grid `protobuf:"bytes,1,rep,name=Grids,proto3" json:"Grids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GridList) Reset() {
	*x = GridList{}
	mi := &file_spaceproto_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GridList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridList) ProtoMessage() {}

func (x *GridList) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridList.ProtoReflect.Descriptor instead.
func (*GridList) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{13}
}

func (x *GridList) GetGrids() map[string]*Grid {
	if x != nil {
		return x.Grids
	}
	return nil
}

type Players struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players map[string]*Player `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Players) Reset() {
	*x = Players{}
	mi := &file_spaceproto_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Players) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Players) ProtoMessage() {}

func (x *Players) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Players.ProtoReflect.Descriptor instead.
func (*Players) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{14}
}

func (x *Players) GetPlayers() map[string]*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type GridBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GridId string       `protobuf:"bytes,1,opt,name=GridId,proto3" json:"GridId,omitempty"`
	Blocks []*GridBlock `protobuf:"bytes,2,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *GridBlocks) Reset() {
	*x = GridBlocks{}
	mi := &file_spaceproto_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GridBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridBlocks) ProtoMessage() {}

func (x *GridBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridBlocks.ProtoReflect.Descriptor instead.
func (*GridBlocks) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{15}
}

func (x *GridBlocks) GetGridId() string {
	if x != nil {
		return x.GridId
	}
	return ""
}

func (x *GridBlocks) GetBlocks() []*GridBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GridBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GridId string `protobuf:"bytes,1,opt,name=GridId,proto3" json:"GridId,omitempty"`
}

func (x *GridBlockRequest) Reset() {
	*x = GridBlockRequest{}
	mi := &file_spaceproto_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GridBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridBlockRequest) ProtoMessage() {}

func (x *GridBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridBlockRequest.ProtoReflect.Descriptor instead.
func (*GridBlockRequest) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{16}
}

func (x *GridBlockRequest) GetGridId() string {
	if x != nil {
		return x.GridId
	}
	return ""
}

type WebsocketMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Types that are assignable to Data:
	//
	//	*WebsocketMessage_GlobalInfo
	//	*WebsocketMessage_SpaceMessage
	//	*WebsocketMessage_GridUpdate
	//	*WebsocketMessage_PlayerUpdate
	//	*WebsocketMessage_PlanetList
	//	*WebsocketMessage_GridList
	//	*WebsocketMessage_Players
	//	*WebsocketMessage_GridBlocks
	//	*WebsocketMessage_GridBlockRequest
	Data isWebsocketMessage_Data `protobuf_oneof:"data"`
}

func (x *WebsocketMessage) Reset() {
	*x = WebsocketMessage{}
	mi := &file_spaceproto_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebsocketMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketMessage) ProtoMessage() {}

func (x *WebsocketMessage) ProtoReflect() protoreflect.Message {
	mi := &file_spaceproto_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketMessage.ProtoReflect.Descriptor instead.
func (*WebsocketMessage) Descriptor() ([]byte, []int) {
	return file_spaceproto_proto_rawDescGZIP(), []int{17}
}

func (x *WebsocketMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *WebsocketMessage) GetData() isWebsocketMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *WebsocketMessage) GetGlobalInfo() *GlobalInfo {
	if x, ok := x.GetData().(*WebsocketMessage_GlobalInfo); ok {
		return x.GlobalInfo
	}
	return nil
}

func (x *WebsocketMessage) GetSpaceMessage() *SpaceMessage {
	if x, ok := x.GetData().(*WebsocketMessage_SpaceMessage); ok {
		return x.SpaceMessage
	}
	return nil
}

func (x *WebsocketMessage) GetGridUpdate() *GridUpdate {
	if x, ok := x.GetData().(*WebsocketMessage_GridUpdate); ok {
		return x.GridUpdate
	}
	return nil
}

func (x *WebsocketMessage) GetPlayerUpdate() *PlayerUpdate {
	if x, ok := x.GetData().(*WebsocketMessage_PlayerUpdate); ok {
		return x.PlayerUpdate
	}
	return nil
}

func (x *WebsocketMessage) GetPlanetList() *PlanetList {
	if x, ok := x.GetData().(*WebsocketMessage_PlanetList); ok {
		return x.PlanetList
	}
	return nil
}

func (x *WebsocketMessage) GetGridList() *GridList {
	if x, ok := x.GetData().(*WebsocketMessage_GridList); ok {
		return x.GridList
	}
	return nil
}

func (x *WebsocketMessage) GetPlayers() *Players {
	if x, ok := x.GetData().(*WebsocketMessage_Players); ok {
		return x.Players
	}
	return nil
}

func (x *WebsocketMessage) GetGridBlocks() *GridBlocks {
	if x, ok := x.GetData().(*WebsocketMessage_GridBlocks); ok {
		return x.GridBlocks
	}
	return nil
}

func (x *WebsocketMessage) GetGridBlockRequest() *GridBlockRequest {
	if x, ok := x.GetData().(*WebsocketMessage_GridBlockRequest); ok {
		return x.GridBlockRequest
	}
	return nil
}

type isWebsocketMessage_Data interface {
	isWebsocketMessage_Data()
}

type WebsocketMessage_GlobalInfo struct {
	GlobalInfo *GlobalInfo `protobuf:"bytes,2,opt,name=GlobalInfo,proto3,oneof"`
}

type WebsocketMessage_SpaceMessage struct {
	SpaceMessage *SpaceMessage `protobuf:"bytes,3,opt,name=SpaceMessage,proto3,oneof"`
}

type WebsocketMessage_GridUpdate struct {
	GridUpdate *GridUpdate `protobuf:"bytes,4,opt,name=GridUpdate,proto3,oneof"`
}

type WebsocketMessage_PlayerUpdate struct {
	PlayerUpdate *PlayerUpdate `protobuf:"bytes,5,opt,name=PlayerUpdate,proto3,oneof"`
}

type WebsocketMessage_PlanetList struct {
	PlanetList *PlanetList `protobuf:"bytes,6,opt,name=PlanetList,proto3,oneof"`
}

type WebsocketMessage_GridList struct {
	GridList *GridList `protobuf:"bytes,7,opt,name=GridList,proto3,oneof"`
}

type WebsocketMessage_Players struct {
	Players *Players `protobuf:"bytes,8,opt,name=Players,proto3,oneof"`
}

type WebsocketMessage_GridBlocks struct {
	GridBlocks *GridBlocks `protobuf:"bytes,9,opt,name=GridBlocks,proto3,oneof"`
}

type WebsocketMessage_GridBlockRequest struct {
	GridBlockRequest *GridBlockRequest `protobuf:"bytes,10,opt,name=GridBlockRequest,proto3,oneof"`
}

func (*WebsocketMessage_GlobalInfo) isWebsocketMessage_Data() {}

func (*WebsocketMessage_SpaceMessage) isWebsocketMessage_Data() {}

func (*WebsocketMessage_GridUpdate) isWebsocketMessage_Data() {}

func (*WebsocketMessage_PlayerUpdate) isWebsocketMessage_Data() {}

func (*WebsocketMessage_PlanetList) isWebsocketMessage_Data() {}

func (*WebsocketMessage_GridList) isWebsocketMessage_Data() {}

func (*WebsocketMessage_Players) isWebsocketMessage_Data() {}

func (*WebsocketMessage_GridBlocks) isWebsocketMessage_Data() {}

func (*WebsocketMessage_GridBlockRequest) isWebsocketMessage_Data() {}

var File_spaceproto_proto protoreflect.FileDescriptor

var file_spaceproto_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b,
	0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x22, 0x33, 0x0a, 0x07, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a,
	0x22, 0x44, 0x0a, 0x0a, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x77, 0x22, 0xbf, 0x02, 0x0a, 0x0a, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0d, 0x53, 0x75, 0x6e, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x33, 0x52, 0x0d, 0x53, 0x75, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x53, 0x75, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x53, 0x68, 0x69,
	0x70, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x4d,
	0x61, 0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x4d,
	0x61, 0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x53, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4c, 0x61, 0x72, 0x67, 0x65,
	0x53, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x53, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x53, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x3c, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x89, 0x04, 0x0a, 0x04, 0x47, 0x72, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x49, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x69,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x47, 0x72, 0x69,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52,
	0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x52, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x43, 0x55, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x43,
	0x55, 0x12, 0x2f, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x37, 0x0a, 0x0c, 0x47, 0x72, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x0c, 0x47, 0x72, 0x69,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33,
	0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61,
	0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4d,
	0x61, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9b,
	0x01, 0x0a, 0x09, 0x47, 0x72, 0x69, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x47, 0x72, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x05, 0x47, 0x72, 0x69, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x0a,
	0x47, 0x72, 0x69, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x47, 0x72,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x04, 0x47, 0x72, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x22, 0xd3, 0x02, 0x0a, 0x05, 0x56, 0x6f, 0x78, 0x65, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x61, 0x73,
	0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x48, 0x61, 0x73, 0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x41, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x41, 0x74, 0x6d,
	0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x39, 0x0a, 0x0e, 0x48, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x48, 0x69, 0x6c, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x06, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x49, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33,
	0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a,
	0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73,
	0x4e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x9a,
	0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x07, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x1a, 0x4d, 0x0a, 0x0c,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x78, 0x65, 0x6c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x08,
	0x47, 0x72, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x47, 0x72, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x72,
	0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x47, 0x72, 0x69, 0x64, 0x73, 0x1a,
	0x4a, 0x0a, 0x0a, 0x47, 0x72, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x69, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x07,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x1a, 0x4e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x0a, 0x47, 0x72, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x69, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x47, 0x72, 0x69, 0x64, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x2a, 0x0a, 0x10, 0x47, 0x72, 0x69, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x72, 0x69, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x72,
	0x69, 0x64, 0x49, 0x64, 0x22, 0xc7, 0x04, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x47, 0x72, 0x69, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x47, 0x72, 0x69, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x47,
	0x72, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x47, 0x72, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x38, 0x0a, 0x0a, 0x47, 0x72, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x47, 0x72, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x47, 0x72,
	0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x47, 0x72, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0e,
	0x5a, 0x0c, 0x2e, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceproto_proto_rawDescOnce sync.Once
	file_spaceproto_proto_rawDescData = file_spaceproto_proto_rawDesc
)

func file_spaceproto_proto_rawDescGZIP() []byte {
	file_spaceproto_proto_rawDescOnce.Do(func() {
		file_spaceproto_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceproto_proto_rawDescData)
	})
	return file_spaceproto_proto_rawDescData
}

var file_spaceproto_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_spaceproto_proto_goTypes = []any{
	(*Range)(nil),            // 0: spaceproto.Range
	(*Vector3)(nil),          // 1: spaceproto.Vector3
	(*Quaternion)(nil),       // 2: spaceproto.Quaternion
	(*GlobalInfo)(nil),       // 3: spaceproto.GlobalInfo
	(*SpaceMessage)(nil),     // 4: spaceproto.SpaceMessage
	(*Grid)(nil),             // 5: spaceproto.Grid
	(*GridBlock)(nil),        // 6: spaceproto.GridBlock
	(*GridGroup)(nil),        // 7: spaceproto.GridGroup
	(*GridUpdate)(nil),       // 8: spaceproto.GridUpdate
	(*Voxel)(nil),            // 9: spaceproto.Voxel
	(*Player)(nil),           // 10: spaceproto.Player
	(*PlayerUpdate)(nil),     // 11: spaceproto.PlayerUpdate
	(*PlanetList)(nil),       // 12: spaceproto.PlanetList
	(*GridList)(nil),         // 13: spaceproto.GridList
	(*Players)(nil),          // 14: spaceproto.Players
	(*GridBlocks)(nil),       // 15: spaceproto.GridBlocks
	(*GridBlockRequest)(nil), // 16: spaceproto.GridBlockRequest
	(*WebsocketMessage)(nil), // 17: spaceproto.WebsocketMessage
	nil,                      // 18: spaceproto.PlanetList.PlanetsEntry
	nil,                      // 19: spaceproto.GridList.GridsEntry
	nil,                      // 20: spaceproto.Players.PlayersEntry
}
var file_spaceproto_proto_depIdxs = []int32{
	1,  // 0: spaceproto.GlobalInfo.SunNormalized:type_name -> spaceproto.Vector3
	1,  // 1: spaceproto.Grid.Position:type_name -> spaceproto.Vector3
	2,  // 2: spaceproto.Grid.Rotation:type_name -> spaceproto.Quaternion
	1,  // 3: spaceproto.GridBlock.GridPosition:type_name -> spaceproto.Vector3
	1,  // 4: spaceproto.GridBlock.Position:type_name -> spaceproto.Vector3
	5,  // 5: spaceproto.GridGroup.Grids:type_name -> spaceproto.Grid
	5,  // 6: spaceproto.GridUpdate.Grid:type_name -> spaceproto.Grid
	1,  // 7: spaceproto.Voxel.Position:type_name -> spaceproto.Vector3
	2,  // 8: spaceproto.Voxel.Rotation:type_name -> spaceproto.Quaternion
	0,  // 9: spaceproto.Voxel.HillParameters:type_name -> spaceproto.Range
	1,  // 10: spaceproto.Player.Position:type_name -> spaceproto.Vector3
	2,  // 11: spaceproto.Player.Rotation:type_name -> spaceproto.Quaternion
	10, // 12: spaceproto.PlayerUpdate.Player:type_name -> spaceproto.Player
	18, // 13: spaceproto.PlanetList.Planets:type_name -> spaceproto.PlanetList.PlanetsEntry
	19, // 14: spaceproto.GridList.Grids:type_name -> spaceproto.GridList.GridsEntry
	20, // 15: spaceproto.Players.Players:type_name -> spaceproto.Players.PlayersEntry
	6,  // 16: spaceproto.GridBlocks.Blocks:type_name -> spaceproto.GridBlock
	3,  // 17: spaceproto.WebsocketMessage.GlobalInfo:type_name -> spaceproto.GlobalInfo
	4,  // 18: spaceproto.WebsocketMessage.SpaceMessage:type_name -> spaceproto.SpaceMessage
	8,  // 19: spaceproto.WebsocketMessage.GridUpdate:type_name -> spaceproto.GridUpdate
	11, // 20: spaceproto.WebsocketMessage.PlayerUpdate:type_name -> spaceproto.PlayerUpdate
	12, // 21: spaceproto.WebsocketMessage.PlanetList:type_name -> spaceproto.PlanetList
	13, // 22: spaceproto.WebsocketMessage.GridList:type_name -> spaceproto.GridList
	14, // 23: spaceproto.WebsocketMessage.Players:type_name -> spaceproto.Players
	15, // 24: spaceproto.WebsocketMessage.GridBlocks:type_name -> spaceproto.GridBlocks
	16, // 25: spaceproto.WebsocketMessage.GridBlockRequest:type_name -> spaceproto.GridBlockRequest
	9,  // 26: spaceproto.PlanetList.PlanetsEntry.value:type_name -> spaceproto.Voxel
	5,  // 27: spaceproto.GridList.GridsEntry.value:type_name -> spaceproto.Grid
	10, // 28: spaceproto.Players.PlayersEntry.value:type_name -> spaceproto.Player
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_spaceproto_proto_init() }
func file_spaceproto_proto_init() {
	if File_spaceproto_proto != nil {
		return
	}
	file_spaceproto_proto_msgTypes[17].OneofWrappers = []any{
		(*WebsocketMessage_GlobalInfo)(nil),
		(*WebsocketMessage_SpaceMessage)(nil),
		(*WebsocketMessage_GridUpdate)(nil),
		(*WebsocketMessage_PlayerUpdate)(nil),
		(*WebsocketMessage_PlanetList)(nil),
		(*WebsocketMessage_GridList)(nil),
		(*WebsocketMessage_Players)(nil),
		(*WebsocketMessage_GridBlocks)(nil),
		(*WebsocketMessage_GridBlockRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceproto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spaceproto_proto_goTypes,
		DependencyIndexes: file_spaceproto_proto_depIdxs,
		MessageInfos:      file_spaceproto_proto_msgTypes,
	}.Build()
	File_spaceproto_proto = out.File
	file_spaceproto_proto_rawDesc = nil
	file_spaceproto_proto_goTypes = nil
	file_spaceproto_proto_depIdxs = nil
}
